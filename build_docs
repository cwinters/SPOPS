#!/usr/bin/perl

# $Id: build_docs,v 3.4 2003/11/26 14:18:43 lachoy Exp $

# build_docs
#   Build docs from SPOPS source and put them into the SPOPS source
#   tree. These docs are included with the SPOPS distribution.

use strict;
use lib qw( doc/ );

use Cwd;
use Data::Dumper qw( Dumper );
use ExtUtils::Manifest;
use File::Basename;
use File::Copy;
use File::Find;
use File::Path;
use Getopt::Std;
use PodView;
use Pod::POM;
use Template;

my $BASE_DIR    = '.';
my $MANUAL_DIR  = 'doc';
my $HTML_DIR    = "site$PodView::INTERNAL_DOC_PATH";
my $DEST_DIR    = 'site/working';
my $DOC_EXT     = $PodView::INTERNAL_DOC_EXT;

my ( $CWD, $DEBUG );
my ( @MANUAL_FILES );

{
    my %opts = ();
    getopt( 'd', \%opts );
    $DEBUG = $opts{d};

    $CWD = cwd;

    # Grab the relevant .pm files from the manifest and extract the
    # POD from them

    my $file_hash = ExtUtils::Manifest::maniread();
    my @pm_process_files = grep /^SPOPS/, grep /pm$/, sort keys %{ $file_hash };

    Pod::POM->default_view( 'Pod::POM::View::Pod' )
                    || die "Cannot set default POD view: $Pod::POM::ERROR\n";

    my $pm_parser = Pod::POM->new( warn => 1 )
                    || die "Cannot create PM POD parser: $Pod::POM::ERROR\n";

    my @site_pod_files = ();
    foreach my $pm_file ( @pm_process_files ) {
        ( $DEBUG > 1 )  && warn "Trying PM [$pm_file]\n";
        my $pom = $pm_parser->parse_file( $pm_file )
                    || die $pm_parser->error(), "\n";
        my $dest_pm_file = "$DEST_DIR/$pm_file";
        $dest_pm_file =~ s/\.pm$/.pod/;
        check_path( $dest_pm_file );
        open( MODPOD, "> $dest_pm_file" )
                    || die "Cannot open [$dest_pm_file]: $!";
        print MODPOD $pom;
        close( MODPOD );
        $DEBUG && warn "Extrated POD from [$pm_file] to [$dest_pm_file] ok\n";
        push @site_pod_files, $dest_pm_file;
    }

    # Grab the doc/manual files

    find( \&get_doc_files, $MANUAL_DIR );
    s|^./|| for ( @MANUAL_FILES );

    # Create our template object with our little linenumber filter and
    # process all the files from doc/ into the site directory

    my $template = Template->new(
                       INCLUDE_PATH => ".:$MANUAL_DIR",
                       FILTERS      => { linenum => \&filter_linenum } );

    # Go through each of the doc files and process it with TT, placing
    # the output in the SPOPS tree AND in the site generation tree

    foreach my $orig_pod ( @MANUAL_FILES ) {
        my $new_pod = $orig_pod;
        $new_pod =~ s|^$MANUAL_DIR/|$DEST_DIR/SPOPS/|;
        check_path( $new_pod );
        eval { $template->process( $orig_pod, {}, $new_pod )
                         || die $template->error() };
        my $status = ( $@ ) ? "failed. Error: $@" : 'ok';
        $DEBUG && warn "Created manual file [$new_pod] ok\n";
        push @site_pod_files, $new_pod;
        my $source_tree_pod = $new_pod;
        $source_tree_pod =~ s|$DEST_DIR/||;
        check_path( $source_tree_pod );
        copy( $new_pod, $source_tree_pod )
                    || die "Failed to copy [$new_pod] -> [$source_tree_pod]: $!";
        $DEBUG && warn "Copied created manual file to [$source_tree_pod] ok\n";
    }

    # Go through each of the .pod documents and transform it to HTML

    require SPOPS;
    my $version = $SPOPS::VERSION;

    Pod::POM->default_view( 'PodView' )
                    || die "Cannot set default HTML view: $Pod::POM::ERROR\n";
    my $parser = Pod::POM->new( warn => 1 )
                    || die "Cannot create POD parser: $Pod::POM::ERROR\n";
    foreach my $site_pod_file ( @site_pod_files ) {
        my $pom = $parser->parse_file( $site_pod_file )
                    || die $parser->error(), "\n";
        my $dest_html_file = $site_pod_file;
        $dest_html_file =~ s/^$DEST_DIR/$HTML_DIR/;
        $dest_html_file =~ s/\.pod$/$DOC_EXT/;
        check_path( $dest_html_file );
        open( SITE, "> $dest_html_file" )
                    || die "Cannot open [$dest_html_file]: $!";
        my $title = $dest_html_file;
        $title =~ s|^$HTML_DIR/||;
        $title =~ s/$DOC_EXT$//;
        $title =~ s|/|::|g;
        print SITE header( $title ),
                   $pom,
                   footer( $version );
        close( SITE );
        $DEBUG && warn "Generated HTML from [$site_pod_file] to [$dest_html_file] ok\n";
    }

    # Finally, create the index page

    open( INDEXIN, "$MANUAL_DIR/index.html" )
                    || die "Cannot read index: $!";
    open( INDEXOUT, "> $HTML_DIR/index$DOC_EXT" )
                    || die "Cannot open index for writing: $!";
    print INDEXOUT header(), <INDEXIN>, footer( $version );
    close( INDEXOUT );
    close( INDEXIN );
}


sub header {
    my ( $title ) = @_;
    if ( $title ) { $title = ": $title" }
    return qq(<!--#set var="title" value="SPOPS Documentation$title"-->\n),
           qq(<!--#include virtual="/inc/header.shtml"-->\n),
           qq(<div class="pod">\n);
}

sub footer {
    my ( $version ) = @_;
    return qq(<p align="right"><em>Generated from the SPOPS <strong>$version</strong> source.</em></p>\n),
           qq(</div>\n),
           qq(<!--#include virtual="/inc/footer.html"-->\n);
}

# Used by File::Find to grab the documentation files we want

sub get_doc_files {
    return unless ( -f $_ );
    return if ( /~/ );
    return if ( $File::Find::dir =~ /examples/ );
    return if ( $File::Find::dir =~ /CVS/ );
    return unless ( /\.pod$/ );
    push @MANUAL_FILES, $File::Find::name;
}


# TT filter to add line numbers to a range of text;

sub filter_linenum {
    my ( $text ) = @_;
    my @lines = split "\n", $text;
    my $pat = ' %2d: %s';
    my @numbered = ();
    for ( my $i = 0; $i < scalar @lines; $i++ ) {
        push @numbered, sprintf( $pat, $i + 1, $lines[ $i ] );
    }
    return join "\n", @numbered;
}

# ensure the path is created

sub check_path {
    my ( $filename ) = @_;
    my $dir = dirname( $filename );
    mkpath( $dir );
}


__END__

=pod

=head1 NAME

build_docs - Build SPOPS documentation

=head1 SYNOPSIS

 $ cd /path/to/SPOPS-source
 $ ./build_docs

=head1 DESCRIPTION

Builds the SPOPS manual from the CVS source. This version of the
manual is included with the official SPOPS distribution.

=head1 COPYRIGHT

Copyright (c) 2001 Chris Winters. All rights reserved.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=head1 AUTHORS

Chris Winters <chris@cwinters.com>

=cut
